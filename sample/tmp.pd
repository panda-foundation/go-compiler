namespace test;

import sys = system;
import compiler.test.sub;

public const b bool = true;
const c char = 'a'; // alias utf-code u32

var sbyte_v sbyte = 1; // alias i8
var short_v short = 0; // alias i16
var int_v int; // alias i32
var long_v long; // alias i64
var int8_v i8;
var int16_v i16;
var int32_v i32;
var int64_v i64;

var byte_v byte; // alias u8
var ushort_v ushort; // alias u16
var uint_v uint; // alias u32
var ulong_v ulong; // alias u64
var uint8_v u8;
var uint16_v u16;
var uint32_v u32;
var uint64_v u64;

var float_v float; // alias f32
var double_v double; // alias f64
var f32_v f32;
var f64_v f64;

var string_v string = "hello world\n";
var string_v_raw string = `hello \n
    world\n`;

@doc "a enum for colors"
enum color
{
    red,
    green = 10,
    blue
}

@doc "an interface"
@serializer(ignore = true)
public interface must_do
{
    print();
}

@doc("another interface")
public interface can_do
{
}

@doc("a class")
public class empty : must_do, can_do
{
    var value int;
}

public class base_class
{
}

public class derive_class : base_class, must_do
{
}

public class generic<K, V>
{
    var k_ K;
    var v_ V;
}

public class derive_generic : generic<int, int>
{
}