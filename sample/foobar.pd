@cpp(include = "<iostream>")
namespace;

const b bool = true;
const c char = 'a'; // alias utf-code u32

var sbyte_v sbyte = 1; // alias i8
var short_v short = 0; // alias i16
var int_v int; // alias i32
var long_v long; // alias i64
var int8_v i8;
var int16_v i16;
var int32_v i32;
var int64_v i64;

var byte_v byte; // alias u8
var ushort_v ushort; // alias u16
var uint_v uint; // alias u32
var ulong_v ulong; // alias u64
var uint8_v u8;
var uint16_v u16;
var uint32_v u32;
var uint64_v u64;

var float_v float; // alias f32
var double_v double; // alias f64
var f32_v f32;
var f64_v f64;

var string_v string = "hello world\n";
var string_v_raw string = `"hello world"`;

public function print_line<T>(t T)
{
    @"std::cout << t << std::endl"
}

function add(a int, b int) int
{
    return a + b;
}

enum color
{
    red,
    green = 10,
    blue
}

public interface printer
{
    function print() void; // void can be ommited
}

public class empty
{
    public function empty()
    {
    }

    public function ~empty()
    {
    }
}

public class base_class
{
    var value int = 1;

    public function base_class(value int)
    {
        this.value = value;
        print_line("base class constructor");
    }

    public function ~base_class()
    {
        print_line("base class destructor");
    }
}

public class derive_class : base_class, printer
{
    public function derive_class(value int)
    {
        //base(value);
        print_line("derive class constructor");
    }

    public function ~derive_class()
    {
        print_line("derive class destructor");
    }

    public function print()
    {
        print_line(this.value);
    }
}

public function main() int
{
    print_line(add(1, 1));
    return 0;
}
